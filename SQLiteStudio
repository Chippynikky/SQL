/* I used SQLiteStudio to write various MySQL statements using a database that was provided. */

/* Shows list of 20 customers */
SELECT * 
FROM BIT_DB.customers 
LIMIT 20;

/* Shows list of 20 January sales */
SELECT * 
FROM BIT_DB.JanSales 
LIMIT 20;

/* Shows number of orders in January */
SELECT COUNT (orderID) Number_of_Orders 
FROM BIT_DB.JanSales;

/* Shows number of iPhone orders in January */
SELECT COUNT (orderID) Number_of_iPhones 
FROM BIT_DB.JanSales 
WHERE Product ="iPhone";

/*Shows customer account numbers for all orders placed in February */
SELECT acctnum Account_Numbers 
FROM BIT_DB.customers Cust
INNER JOIN BIT_DB.FebSales Feb 
ON Cust.order_id = Feb.orderid;

/* Which product was the cheapest one sold in January, and what was the price */
SELECT DISTINCT MIN (JanSales.price) Cheapest_Price, JanSales.Product 
FROM BIT_DB.JanSales
ORDER BY price ASC LIMIT 1;
 /* Alternate SQL */
SELECT distinct Product, Price AS Cheapest_Price
FROM BIT_DB.JanSales
WHERE  price in (SELECT min(price) FROM BIT_DB.JanSales);

/* What is the total revenue for each product sold in January */
SELECT SUM(quantity)*price AS Total_Item_Revenue,product
FROM BIT_DB.JanSales
GROUP BY product;

/* Which products were sold in February at 548 Lincoln St, how many of each, and total revenue */
SELECT Product,SUM (quantity) AS Total_Quantity, SUM(quantity)*price AS Total_Item_Revenue 
FROM BIT_DB.FebSales 
WHERE location = "548 Lincoln St, Seattle, WA 98101" 
GROUP BY product;

/* How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers */
SELECT COUNT (Customer.acctnum) AS Number_of_Customers, ROUND(AVG(quantity*price),2) AS Average_Spent
FROM BIT_DB.FebSales AS February
LEFT JOIN BIT_DB.customers AS Customer
ON February.orderID = Customer.order_ID
WHERE February.quantity > 2;

/* Lists order dates between 02/13/19 to 02/18/19 without sorting */
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between "02/13/19 00:00" AND "02/18/19 00:00";

/* Lists order date between 02/13/19 to 02/18/19 sorting by oldest date and time */
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between "02/13/19 00:00" AND "02/18/19 00:00"
ORDER BY orderdate;

/* Shows loaction of a February sales ordered at 02/18/19 01:35 */
SELECT location
FROM BIT_DB.FebSales 
WHERE orderdate = '02/18/19 01:35';

/* Shows  total number of sales from february sales where order date matches anything from 02/18/19 */
SELECT SUM(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate like '02/18/19%';

/* Shows products from february sales that are batteries */
SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%';

/* Shows products in February sales whose prices end in .99 */
SELECT distinct Product, Price
FROM BIT_DB.FebSales 
WHERE Price like '%.99';

/* List all products sold in LA in February, and include how many of each were sold */
SELECT product, SUM(quantity) AS Total_Quantity
FROM BIT_DB.FebSales
WHERE location like '%los Angeles%'
GROUP BY Product;
