/* This project contains MySQL aggregations that I have written as responses to HackerRank's SQL Preparation - Aggregation tasks */


/* Query a count of the number of cities in CITY having a Population larger than 100,000 */
SELECT COUNT(NAME)
FROM CITY
WHERE POPULATION > 100000;


/* Query the total population of all cities in CITY where District is California */
SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT = "California";


/* Query the average population of all cities in CITY where District is California. */
SELECT AVG(POPULATION)
FROM CITY
WHERE DISTRICT = "California";


/* Query the average population for all cities in CITY, rounded down to the nearest integer. */
SELECT ROUND(AVG(POPULATION))
FROM CITY;


/* Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN. */
SELECT SUM(POPULATION)
FROM CITY
WHERE COUNTRYCODE = "JPN";


/* Query the difference between the maximum and minimum populations in CITY. */
SELECT (MAX(POPULATION))-(MIN(POPULATION))
FROM CITY;


/* Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table,
but did not realize her keyboard's 0 key was broken until after completing the calculation. 
She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.
Write a query calculating the amount of error, and round it up to the next integer. */
SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) 
FROM EMPLOYEES;


/* We define an employee's total earnings to be their monthly SALARY x MONTHS worked, 
and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. 
Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. 
Then print these values as 2 space-separated integers */
SELECT salary * months AS TOT, COUNT(*)
FROM Employee
GROUP BY TOT
ORDER BY TOT DESC
LIMIT 1;


/* Query the following two values from the STATION table:
The sum of all values in LAT_N rounded to a scale of 2 decimal places.
The sum of all values in LONG_W rounded to a scale of 2 decimal places. */
SELECT ROUND(SUM(LAT_N),2)
       , ROUND(SUM(LONG_W),2)
FROM STATION;


/* Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to  decimal places */
SELECT TRUNCATE (SUM(LAT_N),4)
FROM STATION
WHERE LAT_N > 38.7880
    AND LAT_N <137.2345;


/* Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to 4 decimal places */
SELECT TRUNCATE (MAX(LAT_N),4)
FROM STATION
WHERE LAT_N < 137.2345;


/* Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places. */
SELECT ROUND((LONG_W),4)
FROM STATION
WHERE LAT_N < 137.2345
ORDER BY LAT_N DESC
LIMIT 1;


/* Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places. */
SELECT ROUND(MIN(LAT_N),4)
FROM STATION
WHERE LAT_N > 38.7780;

/* Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. Round your answer to 4 decimal places. */
SELECT ROUND (LONG_W,4)
FROM STATION
WHERE (LAT_N) > 38.7780
ORDER BY LAT_N ASC
LIMIT 1;


/* Query the Manhattan Distance between points P1 and P2 and round it to a scale of 4 decimal places. */
SELECT ROUND(
    (MAX(LAT_N)-MIN(LAT_N))
    +(MAX(LONG_W)-MIN(LONG_W))
    ,4)
FROM STATION;


/* Query the Euclidean Distance between points P1 and P2 and format your answer to display 4 decimal digits. */
SELECT
    ROUND(
       SQRT(
        POWER(MAX(LAT_N)  - MIN(LAT_N),  2)
        + POWER(MAX(LONG_W) - MIN(LONG_W), 2)
       ), 
    4)
FROM 
    STATION;
