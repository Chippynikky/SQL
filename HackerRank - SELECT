/* This project contains MySQL queries that I have written to answer tasks from HackerRank SQL Preparation */


/* Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA. */
SELECT * FROM CITY
WHERE POPULATION > 100000
AND CountryCode = "USA";


/* Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA */
SELECT NAME FROM CITY
WHERE COUNTRYCODE = "USA"
AND POPULATION > 120000;


/* Query all columns (attributes) for every row in the CITY table. */
SELECT * FROM CITY;


/* Query all columns for a city in CITY with the ID 1661. */
SELECT * FROM CITY
WHERE ID = "1661";


/* Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN. */
SELECT * FROM CITY
WHERE COUNTRYCODE = "JPN";


/* Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN. */
SELECT NAME FROM CITY
WHERE COUNTRYCODE = "JPN";


/* Query a list of CITY and STATE from the STATION table. */
SELECT CITY
,STATE 
FROM STATION;


/* Query a list of CITY names from STATION for cities that have an even ID number.
Print the results in any order, but exclude duplicates from the answer */
SELECT DISTINCT CITY 
FROM STATION
WHERE MOD(ID,2) = 0;


/* Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table. */
SELECT (COUNT(CITY)-COUNT(DISTINCT CITY)) 
FROM STATION;


/* Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths 
(i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically. */
SELECT CITY, LENGTH (CITY) FROM STATION
ORDER BY LENGTH (CITY), CITY ASC LIMIT 1;

SELECT CITY, LENGTH (CITY) FROM STATION
ORDER BY LENGTH (CITY) DESC LIMIT 1;


/* Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates. */
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP "^[aeiou].*";


/* Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates. */
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP ".*[aeiou]$";


/* Query the list of CITY names from STATION which have vowels as both their first and last characters. Your result cannot contain duplicates. */
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP "^[aeiou].*"
AND CITY REGEXP ".*[aeiou]$";


/* Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates. */
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP "^[^aeiou]";


/* Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP ".*[^aeiou]$";


/* Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates */
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP "^[^aeiou].*"
OR CITY REGEXP ".*[^aeiou]$";


/* Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates. */
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP "^[^aeiou].*"
AND CITY REGEXP ".*[^aeiou]$";


/* Query the Name of any student in STUDENTS who scored higher than 75  Marks.
Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID. */
SELECT NAME
FROM STUDENTS
WHERE MARKS > 75
ORDER BY RIGHT (NAME,3)
, ID ASC;


/* Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order. */
SELECT NAME
FROM EMPLOYEE
ORDER BY NAME ASC;


/* Write a query that prints a list of employee names for employees in Employee having a salary greater than $2000 per month 
who have been employees for less than 10 months. Sort your result by ascending employee_id. */
SELECT NAME
FROM EMPLOYEE
WHERE SALARY > 2000
AND MONTHS < 10
ORDER BY EMPLOYEE_ID ASC;


/* Write a query identifying the type of each record in the TRIANGLES table using its three side lengths.
Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle. */
SELECT CASE
    WHEN A + B > C
    AND B + C > C
    AND A + C > B
        THEN CASE
            WHEN A = B AND B = C THEN 'Equilateral'
            WHEN A = B OR B = C OR A = C THEN 'Isosceles'
            ELSE 'Scalene'
        END
    ELSE 'Not A Triangle'
    END
FROM TRIANGLES;


/* Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical
(i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S). */
SELECT CONCAT(NAME,'(',SUBSTRING(OCCUPATION,1,1),')') AS NAME
FROM OCCUPATIONS
ORDER BY NAME ASC;


/* Query the number of ocurrences of each occupation in OCCUPATIONS.
Sort the occurrences in ascending order, and output them in the following format:
There are a total of [occupation_count] [occupation]s. */
SELECT CONCAT 
('There are a total of',' ',COUNT(OCCUPATION),' ',LOWER(OCCUPATION),'s.') AS TOTAL
FROM OCCUPATIONS
GROUP BY OCCUPATION
ORDER BY TOTAL ASC;


/* Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation.
The output column headers should be Doctor, Professor, Singer, and Actor, respectively.
Note: Print NULL when there are no more names corresponding to an occupation. */
SET @r1=0, @r2=0, @r3=0, @r4=0;
SELECT MIN(Doctor), MIN(Professor), MIN(Singer), MIN(Actor)
FROM(
  SELECT CASE WHEN Occupation='Doctor' THEN (@r1:=@r1+1)
            WHEN Occupation='Professor' THEN (@r2:=@r2+1)
            WHEN Occupation='Singer' THEN (@r3:=@r3+1)
            WHEN Occupation='Actor' THEN (@r4:=@r4+1) END AS RowNumber,
    CASE WHEN Occupation='Doctor' THEN Name END AS Doctor,
    CASE WHEN Occupation='Professor' THEN Name END AS Professor,
    CASE WHEN Occupation='Singer' THEN Name END AS Singer,
    CASE WHEN Occupation='Actor' THEN Name END AS Actor
  FROM OCCUPATIONS
  ORDER BY Name
) Temp
GROUP BY RowNumber;


/* You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.*/
SELECT CASE
    WHEN P IS NULL 
        THEN CONCAT (N, ' Root')
    WHEN N IN (SELECT DISTINCT P FROM BST) 
        THEN CONCAT (N, ' Inner')
    ELSE CONCAT (N, ' Leaf')
    END
FROM BST
ORDER BY N ASC;

/* Given the table schemas below, write a query to print 
the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees.
Order your output by ascending company_code. Company follows a hierarchy */
SELECT company_code, 
    founder,
    (SELECT COUNT(DISTINCT lead_manager_code) FROM Lead_Manager WHERE company_code=c.company_code),
    (SELECT COUNT(DISTINCT senior_manager_code) FROM Senior_Manager WHERE company_code=c.company_code),
    (SELECT COUNT(DISTINCT manager_code) FROM Manager WHERE company_code=c.company_code),
    (SELECT COUNT(DISTINCT employee_code) FROM Employee WHERE company_code=c.company_code)
FROM Company c
ORDER BY company_code;
